{"version":3,"sources":["com/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","Fragment","className","NavLink","to","AddForm","lazy","Promise","all","__webpack_require__","e","then","bind","ListItem","App","BrowserRouter","Navbar","align","react","fallback","Switch","Route","path","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAqCeA,EAlCJ,WACV,OACCC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACFH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sEACXJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,IAAIF,UAAU,wBAA1B,eACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACXJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,KAAKF,UAAU,uBAA3B,WACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,IAAIF,UAAU,uBAA1B,YAGRJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yCACCJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oCACXJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,OAAOF,UAAU,qBACzBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,OADJ,oBAIAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,QAAQF,UAAU,qBAC1BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,QADJ,iBAIAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,QAAQF,UAAU,qBAC1BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,gBADJ,aAIAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,OAAOF,UAAU,qBACzBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,YADJ,kBCnBdG,EAAUC,eAAK,kBAAIC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAGnBC,GADOP,eAAK,kBAAIG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACLN,eAAK,kBAAIG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aA0BXE,mLApBX,OACGhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACNjB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACDH,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wCAAwCe,MAAM,QAC7DnB,EAAAC,EAAAC,cAACkB,EAAA,SAAD,CAAUC,SAAUrB,EAAAC,EAAAC,cAAA,0BACdF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACGtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWX,IAClCf,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,OAAOE,UAAWnB,IAC9BP,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,QAAQE,UAAWX,gBAZrBY,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.8699403a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {NavLink} from 'react-router-dom';\r\nconst Nav =()=>{\r\n\treturn(\r\n\t\t<React.Fragment>\r\n<div className=\"siimple-navbar siimple-navbar--extra-large siimple-navbar--primary\">\r\n    <NavLink to='/' className=\"siimple-navbar-title\">Admin panel</NavLink>\r\n    <div className=\"siimple--float-right\">\r\n        <NavLink to='as' className=\"siimple-navbar-item\">Profile</NavLink>\r\n        <NavLink to='s' className=\"siimple-navbar-item\">Logout</NavLink>\r\n    </div>\r\n</div>\r\n<div className=\"siimple-grid-col siimple-grid-col--3 \">\r\n                <div className=\"siimple-list siimple-list--hover\">\r\n                    <NavLink to='/add' className=\"siimple-list-item\">\r\n                        <div className=\"siimple-list-title\">Add</div>\r\n                        Add New Topic ..\r\n\t                   </NavLink>\r\n                    <NavLink to='/edit' className=\"siimple-list-item\">\r\n                        <div className=\"siimple-list-title\">Edit</div>\r\n                       Edit Topic ..\r\n                    </NavLink>\r\n                    <NavLink to='/List' className=\"siimple-list-item\">\r\n                        <div className=\"siimple-list-title\">Applications</div>\r\n                        asd asdxc\r\n                    </NavLink>\r\n                    <NavLink to='/qwd' className=\"siimple-list-item\">\r\n                        <div className=\"siimple-list-title\">Payments</div>\r\n                        sdvg wqerf\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n</React.Fragment>\r\n\t\t)\r\n}\r\n\r\nexport default Nav;","import React, { Component,Suspense, lazy } from 'react';\n\nimport { BrowserRouter as Router,Switch, Route} from \"react-router-dom\";\n\n// import AddForm from './com/addForm'\n import Nav from './com/Navbar';\n// import Home from './com/home';\n// import ListItem from './com/list';\nconst AddForm = lazy(()=>import('./com/addForm'));\n//const Nav = lazy(()=>import('./com/Navbar'));\nconst Home = lazy(()=>import('./com/home'));\nconst ListItem = lazy(()=>import('./com/list'));\n\n\nclass App extends Component {\n  render() {\n\n    return ( \n       <Router>\n <React.Fragment>\n<Nav />\n<div className=\"siimple-grid-col siimple-grid-col--9 \" align=\"left\">\n<Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n         <Route path=\"/\" exact component={ListItem} />\n        <Route path=\"/add\" component={AddForm} />\n        <Route path=\"/list\" component={ListItem} />\n      </Switch>\n</Suspense>\n</div>\n\n </React.Fragment>\n      </Router> \n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/mini-default.min.css';\nimport './css/myStyle.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}